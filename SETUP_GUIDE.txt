╔══════════════════════════════════════════════════════════════════════════╗
║                                                                          ║
║             🚀 DIGITAL TWIN - QUICK SETUP GUIDE 🚀                       ║
║                                                                          ║
╚══════════════════════════════════════════════════════════════════════════╝

STEP-BY-STEP SETUP INSTRUCTIONS
Complete setup in just 10 minutes!

═══════════════════════════════════════════════════════════════════════════

📋 PREREQUISITES

Before you begin, make sure you have:
✓ Python 3.8 or higher installed
✓ PostgreSQL 12 or higher installed
✓ A code editor (VS Code recommended)
✓ Terminal/Command Prompt access

Download links:
- Python: https://www.python.org/downloads/
- PostgreSQL: https://www.postgresql.org/download/

═══════════════════════════════════════════════════════════════════════════

🔧 STEP 1: EXTRACT PROJECT FILES

1. Extract this ZIP file to a location on your computer
2. You should see two folders:
   - backend/  (Django REST API)
   - frontend/ (Web interface)

═══════════════════════════════════════════════════════════════════════════

💾 STEP 2: SETUP POSTGRESQL DATABASE

1. Open PostgreSQL command line (psql)
   Windows: Search "SQL Shell (psql)" in Start menu
   Mac: Terminal → type "psql postgres"

2. Run these commands:

   CREATE DATABASE digital_twin_db;
   CREATE USER postgres WITH PASSWORD 'your_password_here';
   GRANT ALL PRIVILEGES ON DATABASE digital_twin_db TO postgres;
   \q

3. Remember your password! You'll need it in Step 4.

═══════════════════════════════════════════════════════════════════════════

🐍 STEP 3: SETUP BACKEND (Django)

1. Open terminal/command prompt

2. Navigate to backend folder:
   cd path/to/digital-twin-project/backend

3. Create virtual environment:

   Windows:
   python -m venv venv
   venv\Scripts\activate

   Mac/Linux:
   python3 -m venv venv
   source venv/bin/activate

4. Install dependencies:
   pip install -r requirements.txt

   (This may take 2-3 minutes)

═══════════════════════════════════════════════════════════════════════════

⚙️ STEP 4: CONFIGURE ENVIRONMENT

1. Copy .env.example to .env:

   Windows:
   copy .env.example .env

   Mac/Linux:
   cp .env.example .env

2. Edit .env file (open with any text editor):

   Required changes:
   - DB_PASSWORD=your_password_here (from Step 2)
   - SECRET_KEY=(generate new key - see below)

3. Generate SECRET_KEY:
   python -c "from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())"

   Copy the output and paste it in .env as SECRET_KEY value

═══════════════════════════════════════════════════════════════════════════

🗄️ STEP 5: CREATE DATABASE TABLES

Run these commands in order:

1. python manage.py makemigrations
2. python manage.py migrate
3. python manage.py createsuperuser

For step 3, you'll be asked to create an admin account:
- Username: (choose any)
- Email: (your email)
- Password: (choose a strong password)

═══════════════════════════════════════════════════════════════════════════

🚀 STEP 6: START BACKEND SERVER

Run:
python manage.py runserver

You should see:
✓ Starting development server at http://127.0.0.1:8000/
✓ Quit the server with CTRL-BREAK.

🎉 Backend is now running!

Keep this terminal open and running.

═══════════════════════════════════════════════════════════════════════════

🌐 STEP 7: SETUP FRONTEND

1. Open a NEW terminal/command prompt

2. Navigate to frontend folder:
   cd path/to/digital-twin-project/frontend

3. Start a simple HTTP server:

   Python:
   python -m http.server 5500

   OR using VS Code:
   - Install "Live Server" extension
   - Right-click index.html → "Open with Live Server"

   OR using Node.js:
   npx http-server -p 5500

Frontend is now running at: http://localhost:5500/

═══════════════════════════════════════════════════════════════════════════

✅ STEP 8: ACCESS THE APPLICATION

1. Open your web browser

2. Go to: http://localhost:5500/

3. You should see the Digital Twin landing page!

4. Click "Get Started" to create your first account

═══════════════════════════════════════════════════════════════════════════

🧪 TESTING THE APPLICATION

1. CREATE ACCOUNT:
   - Click "Get Started" or "Sign Up"
   - Fill in your details
   - Click "Sign Up"
   - You'll be automatically logged in

2. ENTER HEALTH DATA:
   - Go to "Data Entry" page
   - Fill in vitals, lifestyle, and academic data
   - Click "Submit"

3. VIEW DASHBOARD:
   - Go to "Dashboard" to see your data visualized
   - Check charts and statistics

4. VERIFY IN DATABASE:
   - Go to http://localhost:8000/admin/
   - Login with superuser credentials (from Step 5)
   - Click "Vital records" to see saved data

═══════════════════════════════════════════════════════════════════════════

🎯 QUICK REFERENCE

Backend API: http://localhost:8000/
Frontend App: http://localhost:5500/
Admin Panel: http://localhost:8000/admin/
API Docs: http://localhost:8000/api/docs/

═══════════════════════════════════════════════════════════════════════════

🐛 TROUBLESHOOTING

ISSUE: "Port 8000 already in use"
SOLUTION: 
- Another app is using port 8000
- Run: python manage.py runserver 8001
- Update frontend/js/api-config.js to use port 8001

ISSUE: "psycopg2 installation failed"
SOLUTION:
- Windows: Download from https://www.lfd.uci.edu/~gohlke/pythonlibs/#psycopg
- Mac: brew install postgresql
- Linux: sudo apt-get install libpq-dev

ISSUE: "CORS error in browser console"
SOLUTION:
- Check backend/.env file
- Ensure CORS_ALLOWED_ORIGINS includes http://localhost:5500

ISSUE: "Database connection failed"
SOLUTION:
- Verify PostgreSQL is running
- Check DB_PASSWORD in .env matches your PostgreSQL password
- Ensure database 'digital_twin_db' exists

ISSUE: "Module not found" errors
SOLUTION:
- Ensure virtual environment is activated
- Run: pip install -r requirements.txt again

ISSUE: "Can't create superuser"
SOLUTION:
- Make sure migrations are run: python manage.py migrate
- Try: python manage.py createsuperuser --username admin --email admin@example.com

═══════════════════════════════════════════════════════════════════════════

📚 ADDITIONAL RESOURCES

For detailed documentation:
- README.md - Project overview
- backend/README.md - Complete API documentation
- INTEGRATION_GUIDE.md - Frontend-backend integration

For help with specific features, see the backend/README.md file which includes:
- All API endpoints with examples
- Request/response formats
- Authentication guide
- Database schema
- Deployment instructions

═══════════════════════════════════════════════════════════════════════════

🎉 CONGRATULATIONS!

If you've reached this point, your full-stack Digital Twin application is up 
and running! You now have:

✓ Django REST API backend with 30+ endpoints
✓ PostgreSQL database
✓ User authentication with JWT tokens
✓ Beautiful responsive frontend
✓ Health tracking features
✓ Data analytics and visualization

Next steps:
1. Explore all features of the application
2. Add your own customizations
3. Deploy to production (see backend/README.md)
4. Add to your portfolio!

═══════════════════════════════════════════════════════════════════════════

Need help? Check:
1. README.md for project overview
2. backend/README.md for API documentation
3. INTEGRATION_GUIDE.md for code examples

Happy coding! 🚀

