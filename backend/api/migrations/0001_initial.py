# Generated by Django 4.2.7 on 2025-10-29 12:06

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('avatar_url', models.URLField(blank=True, null=True)),
                ('theme_preference', models.CharField(choices=[('ocean', 'Ocean Blue'), ('dark', 'Dark'), ('sunset', 'Sunset'), ('forest', 'Forest')], default='ocean', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
                'ordering': ['-created_at'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='VitalRecord',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('heart_rate', models.IntegerField(validators=[django.core.validators.MinValueValidator(40), django.core.validators.MaxValueValidator(200)])),
                ('blood_pressure_systolic', models.IntegerField(validators=[django.core.validators.MinValueValidator(70), django.core.validators.MaxValueValidator(200)])),
                ('blood_pressure_diastolic', models.IntegerField(validators=[django.core.validators.MinValueValidator(40), django.core.validators.MaxValueValidator(130)])),
                ('temperature', models.FloatField(validators=[django.core.validators.MinValueValidator(95.0), django.core.validators.MaxValueValidator(105.0)])),
                ('oxygen_saturation', models.IntegerField(validators=[django.core.validators.MinValueValidator(80), django.core.validators.MaxValueValidator(100)])),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vital_records', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'vital_records',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='LifestyleRecord',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('sleep_hours', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(24.0)])),
                ('stress_level', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('diet_quality_score', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('water_intake', models.IntegerField(default=8, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(30)])),
                ('physical_activity_minutes', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1440)])),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lifestyle_records', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'lifestyle_records',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Goal',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('target_value', models.FloatField()),
                ('current_value', models.FloatField(default=0.0)),
                ('unit', models.CharField(max_length=50)),
                ('deadline', models.DateField()),
                ('is_completed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='goals', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'goals',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ExportRequest',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('format', models.CharField(choices=[('json', 'JSON'), ('csv', 'CSV'), ('pdf', 'PDF')], max_length=10)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('requested_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('file_url', models.URLField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='export_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'export_requests',
                'ordering': ['-requested_at'],
            },
        ),
        migrations.CreateModel(
            name='AcademicMetric',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('study_hours', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(24.0)])),
                ('attendance_percentage', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('focus_level', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('assignment_completion_rate', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='academic_metrics', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'academic_metrics',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='AchievementBadge',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(default='trophy', max_length=50)),
                ('earned_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'achievement_badges',
                'ordering': ['-earned_at'],
                'unique_together': {('user', 'name')},
            },
        ),
    ]
